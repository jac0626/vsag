name: Build, Test and Publish Wheels

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build_wheels:
    name: Build wheels for ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x86_64
            runner: ubuntu-latest
          - arch: aarch64
            runner: ubuntu-22.04-arm
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for setuptools_scm
      
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.12.0
        with:
          package-dir: python
        env:
          # Tell cibuildwheel to build for the specific architecture
          CIBW_ARCHS: ${{ matrix.arch }}
          
          # Specify which Python versions to build
          CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-*"
          
          # Skip PyPy and musllinux builds
          CIBW_SKIP: "pp* *-musllinux*"
          
          # Use a newer manylinux image that doesn't rely on CentOS 7
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
          
          CIBW_BEFORE_ALL: |
            # Fix CentOS 7 repos
            sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*.repo
            sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*.repo
            
            # Fix aarch64 specific issues
            if [[ "$(uname -m)" == "aarch64" ]]; then
              rm -f /etc/yum.repos.d/CentOS-SCLo-*.repo
            fi
            
            yum clean all
            
            # Install development tools
            yum install -y gcc gcc-c++ gcc-gfortran python3-devel
            
            # Install other dependencies
            yum install -y libaio-devel libcurl-devel ca-certificates
            
            # Install Intel MKL (only for x86_64)
            if [[ "$(uname -m)" == "x86_64" ]]; then
              yum-config-manager --add-repo https://yum.repos.intel.com/mkl/setup/intel-mkl.repo
              rpm --import https://yum.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB
              yum install -y intel-mkl-64bit-2020.0-088
            fi
            
            # For OpenMP, use the standard package instead of alibaba-specific ones
            yum install -y libgomp
      
      # Upload individual wheel files
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.arch }}
          path: ./wheelhouse/*.whl
          if-no-files-found: error

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for setuptools_scm
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Build sdist
        run: |
          cd python
          pip install build
          python -m build --sdist
      
      # Upload source distribution
      # sdist is important because:
      # 1. It provides source code for platforms without pre-built wheels
      # 2. PyPI best practice is to upload both wheels and sdist
      # 3. Some users prefer to build from source for security/audit reasons
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: python/dist/*.tar.gz
          if-no-files-found: error

  publish_test_pypi:
    name: Publish to TestPyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # Only publish on main branch or release
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    steps:
      - uses: actions/checkout@v4
      
      # Download all artifacts
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      
      # Show what we're uploading
      - name: List distribution files
        run: |
          ls -la dist/
          echo "Files to upload:"
          ls -1 dist/
      
      # Publish to TestPyPI
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          skip-existing: true
          verbose: true

  test_installation:
    name: Test installation from TestPyPI (${{ matrix.arch }})
    needs: publish_test_pypi
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # x86_64 架构测试
          - arch: x86_64
            runner: ubuntu-latest
            python-version: '3.8'
          - arch: x86_64
            runner: ubuntu-latest
            python-version: '3.9'
          - arch: x86_64
            runner: ubuntu-latest
            python-version: '3.10'
          - arch: x86_64
            runner: ubuntu-latest
            python-version: '3.11'
          - arch: x86_64
            runner: ubuntu-latest
            python-version: '3.12'
          # ARM64 架构测试
          - arch: aarch64
            runner: ubuntu-22.04-arm
            python-version: '3.8'
          - arch: aarch64
            runner: ubuntu-22.04-arm
            python-version: '3.9'
          - arch: aarch64
            runner: ubuntu-22.04-arm
            python-version: '3.10'
          - arch: aarch64
            runner: ubuntu-22.04-arm
            python-version: '3.11'
          - arch: aarch64
            runner: ubuntu-22.04-arm
            python-version: '3.12'
    
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Show system info
        run: |
          echo "Architecture: $(uname -m)"
          echo "Python version: ${{ matrix.python-version }}"
          python --version
          pip --version
      
      - name: Wait for TestPyPI to update
        run: |
          echo "Waiting 60 seconds for TestPyPI to update..."
          sleep 60
      
      - name: Test installation from TestPyPI
        run: |
          # Replace 'pyvsag-test-jc' with your actual package name
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ pyvsag-test-jc
          
          # Test import (replace with your actual package name)
          python -c "import your_package_name; print('Successfully imported package')"
          
          # Verify the installed package info
          pip show pyvsag-test-jc
      
      - name: Run basic tests
        run: |
          # Show architecture info for debugging
          python -c "
          import platform
          import sys
          print(f'Platform: {platform.platform()}')
          print(f'Machine: {platform.machine()}')
          print(f'Processor: {platform.processor()}')
          print(f'Python: {sys.version}')
          print(f'Architecture: {platform.architecture()}')
          "
          
          # Add your actual tests here
          # For example:
          # python -c "from your_package import some_function; some_function()"
          echo "Add your basic tests here"

  publish_pypi:
    name: Publish to PyPI
    needs: test_installation
    runs-on: ubuntu-latest
    # Only publish on release
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: pypi
      url: https://pypi.org/p/pyvsag-test-jc  # Replace with your package
    
    steps:
      # Download all artifacts again
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      
      # Show what we're uploading
      - name: List distribution files
        run: |
          ls -la dist/
          echo "Files to upload to PyPI:"
          ls -1 dist/
      
      # Publish to PyPI
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true

  # Optional: Create GitHub Release with artifacts
  upload_release_assets:
    name: Upload Release Assets
    needs: publish_pypi
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
