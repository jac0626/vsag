name: Build, Test and Publish Wheels

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build_wheels:
    name: Build wheels for ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x86_64
            runner: ubuntu-latest
          - arch: aarch64
            runner: ubuntu-22.04-arm
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get package info
        id: get_info
        run: |
          pip install setuptools setuptools-scm
          cd python
          
            # Get package version
           cat > get_version.py << 'EOF'
            from setuptools_scm import get_version
            import os
            # Go up one directory to find the git root
            print(get_version(root='..'))
            EOF

          # 执行脚本获取版本
          VERSION=$(python get_version.py)
          
         
          
          # Get package name
          if [ -z "$PACKAGE_NAME" ] && [ -f pyproject.toml ]; then
            pip install tomli
            PACKAGE_NAME=$(python -c "import tomli; data = tomli.load(open('pyproject.toml', 'rb')); print(data['project']['name'])" 2>/dev/null || echo "")
          fi
          
     
          echo "Package name: $PACKAGE_NAME"
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          
          # Save both to files for later jobs
          echo "$VERSION" > ../version.txt
          echo "$PACKAGE_NAME" > ../package_name.txt
      
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.12.0
        with:
          package-dir: python
        env:
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-*"
          CIBW_SKIP: "pp* *-musllinux*"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
          CIBW_BEFORE_ALL: |
            sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*.repo
            sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*.repo
            
            if [[ "$(uname -m)" == "aarch64" ]]; then
              rm -f /etc/yum.repos.d/CentOS-SCLo-*.repo
            fi
            
            yum clean all
            yum install -y gcc gcc-c++ gcc-gfortran python3-devel
            yum install -y libaio-devel libcurl-devel ca-certificates
            
            if [[ "$(uname -m)" == "x86_64" ]]; then
              yum-config-manager --add-repo https://yum.repos.intel.com/mkl/setup/intel-mkl.repo
              rpm --import https://yum.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB
              yum install -y intel-mkl-64bit-2020.0-088
            fi
            
            yum install -y libgomp
      
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.arch }}
          path: ./wheelhouse/*.whl
          if-no-files-found: error
      
      - uses: actions/upload-artifact@v4
        if: matrix.arch == 'x86_64'
        with:
          name: package-info
          path: |
            version.txt
            package_name.txt

  publish_test_pypi:
    name: Publish to TestPyPI
    needs: [build_wheels]
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_info.outputs.version }}
      package_name: ${{ steps.get_info.outputs.package_name }}
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: package-info
          path: .
      
      - name: Get package info from artifacts
        id: get_info
        run: |
          VERSION=$(cat version.txt)
          PACKAGE_NAME=$(cat package_name.txt)
          echo "Package version: $VERSION"
          echo "Package name: $PACKAGE_NAME"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
      
      - uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheels-*
          merge-multiple: true
      
      - name: List distribution files
        run: |
          ls -la dist/
          echo "Files to upload for ${{ steps.get_info.outputs.package_name }} (version ${{ steps.get_info.outputs.version }}):"
          ls -1 dist/
      
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          skip-existing: true
          verbose: true

  test_installation:
    name: Test installation from TestPyPI (${{ matrix.arch }})
    needs: publish_test_pypi
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x86_64
            runner: ubuntu-latest
            python-version: '3.8'
          - arch: x86_64
            runner: ubuntu-latest
            python-version: '3.9'
          - arch: x86_64
            runner: ubuntu-latest
            python-version: '3.10'
          - arch: x86_64
            runner: ubuntu-latest
            python-version: '3.11'
          - arch: x86_64
            runner: ubuntu-latest
            python-version: '3.12'
          - arch: aarch64
            runner: ubuntu-22.04-arm
            python-version: '3.8'
          - arch: aarch64
            runner: ubuntu-22.04-arm
            python-version: '3.9'
          - arch: aarch64
            runner: ubuntu-22.04-arm
            python-version: '3.10'
          - arch: aarch64
            runner: ubuntu-22.04-arm
            python-version: '3.11'
          - arch: aarch64
            runner: ubuntu-22.04-arm
            python-version: '3.12'
    
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Show system info
        run: |
          echo "Architecture: $(uname -m)"
          echo "Python version: ${{ matrix.python-version }}"
          echo "Package name: ${{ needs.publish_test_pypi.outputs.package_name }}"
          echo "Package version to install: ${{ needs.publish_test_pypi.outputs.version }}"
          python --version
          pip --version
      
      - name: Wait for TestPyPI to update
        run: |
          PACKAGE_NAME="${{ needs.publish_test_pypi.outputs.package_name }}"
          VERSION="${{ needs.publish_test_pypi.outputs.version }}"
          echo "Waiting for TestPyPI to update with $PACKAGE_NAME version $VERSION..."
          
          for i in {1..20}; do
            echo "Attempt $i: Checking if version is available..."
            if pip index versions $PACKAGE_NAME -i https://test.pypi.org/simple/ 2>/dev/null | grep -q "$VERSION"; then
              echo "Version $VERSION is now available!"
              break
            fi
            if [ $i -eq 20 ]; then
              echo "Warning: Version might not be available yet, proceeding anyway..."
            fi
            sleep 15
          done
      
      - name: Test installation from TestPyPI
        run: |
          PACKAGE_NAME="${{ needs.publish_test_pypi.outputs.package_name }}"
          VERSION="${{ needs.publish_test_pypi.outputs.version }}"
          echo "Installing $PACKAGE_NAME version: $VERSION"
          
          pip install --index-url https://test.pypi.org/simple/ \
                      --extra-index-url https://pypi.org/simple/ \
                      ${PACKAGE_NAME}==$VERSION
          
          # Extract the base module name (handle cases like package-name -> package_name)
          MODULE_NAME=$(echo "$PACKAGE_NAME" | sed 's/-/_/g')
          python -c "import $MODULE_NAME; print('Successfully imported package')"
          
          pip show $PACKAGE_NAME
          
          INSTALLED_VERSION=$(pip show $PACKAGE_NAME | grep Version | awk '{print $2}')
          if [ "$INSTALLED_VERSION" != "$VERSION" ]; then
            echo "Error: Installed version ($INSTALLED_VERSION) doesn't match expected version ($VERSION)"
            exit 1
          fi
          echo "✓ Correct version installed: $INSTALLED_VERSION"
      
      - name: Run basic tests
        run: |
          pip install numpy
          python examples/python/example_diskann.py

  publish_pypi:
    name: Publish to PyPI
    needs: [test_installation, publish_test_pypi]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: pypi
      url: https://pypi.org/p/${{ needs.publish_test_pypi.outputs.package_name }}
    
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheels-*
          merge-multiple: true
      
      - name: List distribution files
        run: |
          ls -la dist/
          echo "Files to upload to PyPI for ${{ needs.publish_test_pypi.outputs.package_name }}:"
          ls -1 dist/
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true

  upload_release_assets:
    name: Upload Release Assets
    needs: publish_pypi
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheels-*
          merge-multiple: true
      
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
